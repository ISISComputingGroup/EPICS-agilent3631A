#
# Simple database and stream protocol file for basic SCPI (IEEE488.2) commands
#


#
# Short and long form of identification string
#
record(stringin, "$(P)$(R)IDN")
{
    field(DESC, "SCPI identification string")
    field(DTYP, "stream")
    field(INP,  "@devagilent3631A.proto getIDN(39) $(PORT) $(A)")
    field(PINI, "YES")
}
record(waveform, "$(P)$(R)IDNwf")
{
    field(DESC, "SCPI identification string")
    field(DTYP, "stream")
    field(INP,  "@devagilent3631A.proto getIDN(199) $(PORT) $(A)")
    field(PINI, "YES")
    field(FTVL, "CHAR")
    field(NELM, "200")
}

record(bo, "$(P)$(R)RST")
{
    field(DESC, "SCPI Reset")
    field(DTYP, "stream")
    field(OUT,  "@devagilent3631A.proto cmd(*RST) $(PORT) $(A)")
}

record(bo, "$(P)$(R)CLS")
{
    field(DESC, "SCPI Clear status")
    field(DTYP, "stream")
    field(OUT,  "@devagilent3631A.proto cmd(*CLS) $(PORT) $(A)")
}

record(longin, "$(P)$(R)GetSTB")
{
    field(DESC, "SCPI get status byte")
    field(DTYP, "stream")
    field(INP,  "@devagilent3631A.proto getD(*STB) $(PORT) $(A)")
}

record(longin, "$(P)$(R)GetESR")
{
    field(DESC, "SCPI get event status")
    field(DTYP, "stream")
    field(INP,  "@devagilent3631A.proto getD(*ESR) $(PORT) $(A)")
}

record(longout, "$(P)$(R)SetESE")
{
    field(DESC, "SCPI enable event status")
    field(DTYP, "stream")
    field(OUT,  "@devagilent3631A.proto setD(*ESE) $(PORT) $(A)")
}

record(longin, "$(P)$(R)GetESE")
{
    field(DESC, "SCPI enabled event status")
    field(DTYP, "stream")
    field(INP,  "@devagilent3631A.proto getD(*ESE) $(PORT) $(A)")
}

record(longout, "$(P)$(R)SetSRE")
{
    field(DESC, "SCPI enable service requests")
    field(DTYP, "stream")
    field(OUT,  "@devagilent3631A.proto setD(*SRE) $(PORT) $(A)")
}

record(longin, "$(P)$(R)GetSRE")
{
    field(DESC, "Enabled service requests")
    field(DTYP, "stream")
    field(INP,  "@devagilent3631A.proto getD(*SRE) $(PORT) $(A)")
}

record(longin, "$(P)$(R)GetOPC")
{
    field(DESC, "Output completion status")
    field(DTYP, "stream")
    field(INP,  "@devagilent3631A.proto getD(*OPC) $(PORT) $(A)")
}

#Additional Records to provide basic functionality as per the LabVIEW driver

#Get Current
record(ai, "$(P)$(R)CURR:R") {
  field(DESC, "Current Readback")
  field(DTYP, "stream")
  field(INP, "@devagilent3631A.proto read_float(MEAS:CURR) $(PORT) $(A)")
  field(PREC, "3")
  field(EGU, "A")
  field(SDIS, "$(P)$(R)DISABLE")
  field(SCAN, ".2 second")
}

#Get ID
#Already supplied - see above

#Get Output Status
record(bi, "$(P)$(R)OUT:R") {
  field(DESC, "Output Readback")
  field(DTYP, "stream")
  field(INP, "@devagilent3631A.proto read_int(OUTP) $(PORT) $(A)")
  field(ZNAM, "Off")
  field(ONAM, "On") 
  field(SDIS, "$(P)$(R)DISABLE")
  field(SCAN, ".2 second")
}

#Get System Error
#This field is not scanned as the error should be asked for - this
#is part of the business logic generated in LabVIEW and may not be 
#practical for EPICS
record(stringin, "$(P)$(R)ERROR:R") {
  field(DESC, "System Error Readback")
  field(DTYP, "stream")
  field(INP, "@devagilent3631A.proto read_string(SYST:ERR) $(PORT) $(A)")
  field(SDIS, "$(P)$(R)DISABLE")
}

#Get Voltage
record(ai, "$(P)$(R)VOLT:R") {
  field(DESC, "Voltage Readback")
  field(DTYP, "stream")
  field(INP, "@devagilent3631A.proto read_float(MEAS:VOLT) $(PORT) $(A)")
  field(PREC, "3")
  field(EGU, "V")
  field(SDIS, "$(P)$(R)DISABLE")
  field(SCAN, ".2 second")
}

#Set Current
record(ao, "$(P)$(R)CURR:W") {
  field(DESC, "Current")
  field(DTYP, "stream")
  field(FLNK, "$(P)$(R)CURR:R")
  field(OUT, "@devagilent3631A.proto write_float(CURR) $(PORT) $(A)")
  field(PREC, "3")
  field(EGU, "A")
  field(SDIS, "$(P)$(R)DISABLE")
}

#Set Output Status
record(bo, "$(P)$(R)OUT:W") {
  field(DESC, "Output")
  field(DTYP, "stream")
  field(FLNK, "$(P)$(R)OUT:R")
  field(OUT, "@devagilent3631A.proto write_int(OUTP) $(PORT) $(A)")
  field(ZNAM, "Off")
  field(ONAM, "On")  
  field(SDIS, "$(P)$(R)DISABLE")
}

#Set System Remote Status
#Note that this will involve an error whenever the system is in GPIB mode
record (bo, "$(P)$(R)REMOTE:W") {
	field(DESC,"Set into local/remote mode")
	field(DTYP,"stream")
	field(OUT,"@devagilent3631A.proto setLocRem $(PORT) $(A)")
	field(ZNAM,"Local")
	field(ONAM,"Remote")
	field(PINI,"YES")
	field(VAL,"1")
}

#Set Voltage
record(ao, "$(P)$(R)VOLT:W") {
  field(DESC, "Voltage")
  field(DTYP, "stream")
  field(FLNK, "$(P)$(R)VOLT:R")
  field(OUT, "@devagilent3631A.proto write_float(VOLT) $(PORT) $(A)")
  field(PREC, "3")
  field(EGU, "V")
  field(SDIS, "$(P)$(R)DISABLE")
}